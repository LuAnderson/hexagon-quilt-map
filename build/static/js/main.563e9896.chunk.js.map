{"version":3,"sources":["components/Hexagon.js","components/QuiltSection.js","components/util.js","components/image.js","App.js","serviceWorker.js","index.js"],"names":["Hexagon","image","idx","css","overflow","visibility","transform","width","height","margin","marginTop","backgroundRepeat","backgroundImage","backgroundPosition","backgroundOrigin","backgroundColor","randImgNum","QuiltSection","imageList","prevImage","className","Array","keys","map","num","hexiImage","rowWidth","min","max","lastRow","Math","ceil","floor","random","indexOf","getImage","push","key","images","wkey","widx","w","hkey","hidx","join","split","App","console","log","boxShadow","color","fontSize","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0dAkEeA,EA/DC,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IACxB,OACE,mBACEC,IAAG,YAAE,CACHC,SAAU,SACVC,WAAY,SACZC,UAAW,iBACXC,MAAO,IACPC,OAAQ,IACRC,OAAO,cACP,mBAAoB,CAClBC,UAAW,KARZ,KAYH,mBACEP,IAAG,GAQH,mBACEA,IAAG,YAAE,CACHI,MAAO,OACPC,OAAQ,OACRG,iBAAkB,SAClBC,gBAAgB,mBAAD,OAAqBX,EAArB,SACfY,mBAAoB,SACpBR,WAAY,UACZC,UAAW,iBACXQ,iBAAkB,aAClBC,gBAAiBb,EAAM,EAAI,MAAQ,QATlC,KAYH,mBACEC,IAAG,GAYFF,EAAMe,gB,sICZJC,EArCM,WACnB,IAAMC,EAAY,GACdC,EAAY,GAgBhB,OACE,mBACEC,UAAU,QACVjB,IAAG,GAOF,YAAIkB,MAAM,KAAQC,QAAQC,KAAI,SAACC,EAAKtB,GACnC,IAAMuB,EAzBK,SAACC,EAAUxB,GAC1B,ICTiCyB,EAAKC,EDShCC,EAAU,CAACX,EAAUhB,EAAMwB,EAAW,GAAIR,EAAUhB,EAAMwB,GAAWR,EAAUhB,EAAMwB,EAAW,IAElGV,EAAa,EAEjB,GCbiCW,EDcL,ECdUC,EDcP,GCbjCD,EAAMG,KAAKC,KAAKJ,GAChBC,EAAME,KAAKE,MAAMJ,GDYbZ,ECXGc,KAAKE,MAAMF,KAAKG,UAAYL,EAAMD,IAAQA,QDYtCX,IAAeG,GAAaU,EAAQK,QAAQlB,IAAe,GAIpE,OAFAG,EAAYH,EAELA,EAcemB,CAAS,GAAIjC,GAE/B,OADAgB,EAAUkB,KAAKX,GACR,YAAC,EAAD,CAASY,IAAG,mBAAcb,GAAOtB,IAAKA,EAAKD,MAAOwB,SEtBlDa,EAbA,YAAIjB,MAAM,GAAGC,QACzBC,KAAI,SAACgB,EAAMC,GACV,IAAMC,EAAC,YAAe,IAAPD,EAAa,IAArB,MAMP,OAJU,YAAInB,MAAM,GAAGC,QAAQC,KAAI,SAACmB,EAAMC,GACxC,MAAM,GAAN,OAAUF,EAAV,YAAuB,KAAPE,EAAa,EAA7B,SAGOC,UAEVA,OACAC,MAAM,K,uEC0BMC,MAhCf,WAEE,OADAC,QAAQC,IAAIV,GAEV,wBACE,mBAAKnC,IAAG,GACL,YAAIkB,MAAM,IAAIC,QAAQC,KAAI,SAACtB,EAAOC,GAEjC,OADA6C,QAAQC,IAAI9C,EAAM,GAEhB,mBACEmC,IAAG,2BAAsBnC,GACzBC,IAAG,YAAE,CACHI,MAAO,GACPC,OAAQ,GACRG,iBAAkB,YAClBC,gBAAgB,mBAAD,OAAqBV,EAAM,EAA3B,SACfW,mBAAoB,SACpBJ,OAAQ,SACRwC,UAAW,sBACXC,MAAO,OACPC,SAAU,IATT,KAYFjD,EAAM,OAKf,YAAC,EAAD,QCpBckD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,YAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.563e9896.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Hexagon = ({ image, idx }) => {\n  return (\n    <div\n      css={{\n        overflow: \"hidden\",\n        visibility: \"hidden\",\n        transform: \"rotate(120deg)\",\n        width: 225,\n        height: 100,\n        margin: `0 0 0 -55px`,\n        \":nth-child(even)\": {\n          marginTop: 50,\n        },\n      }}\n    >\n      <div\n        css={{\n          position: \"relative\",\n          overflow: \"hidden\",\n          width: \"100%\",\n          height: \"100%\",\n          transform: \"rotate(-60deg)\",\n        }}\n      >\n        <div\n          css={{\n            width: \"100%\",\n            height: \"100%\",\n            backgroundRepeat: \"repeat\",\n            backgroundImage: `url(/beeCreative${image}.jpg)`,\n            backgroundPosition: \"center\",\n            visibility: \"visible\",\n            transform: \"rotate(-60deg)\",\n            backgroundOrigin: \"border-box\",\n            backgroundColor: idx % 2 ? \"red\" : \"blue\",\n          }}\n        >\n          <div\n            css={{\n              position: \"absolute\",\n              display: \"flex\",\n              top: \"25%\",\n              left: \"40%\",\n              bottom: \"25%\",\n              rigt: \"40%\",\n              zIndex: 10,\n              color: \"blue\",\n              fontSize: 48,\n            }}\n          >\n            {image.randImgNum}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nHexagon.propTypes = {\n  image: PropTypes.number,\n  idx: PropTypes.number,\n};\n\nexport default Hexagon;\n","import React from \"react\";\nimport Hexagon from \"./Hexagon\";\nimport getRandomInt from \"./util\";\n\nconst QuiltSection = () => {\n  const imageList = [];\n  let prevImage = \"\";\n\n  const getImage = (rowWidth, idx) => {\n    const lastRow = [imageList[idx - rowWidth - 1], imageList[idx - rowWidth], imageList[idx - rowWidth + 1]];\n\n    let randImgNum = 1;\n\n    do {\n      randImgNum = getRandomInt(1, 26);\n    } while (randImgNum === prevImage || lastRow.indexOf(randImgNum) > -1);\n\n    prevImage = randImgNum;\n\n    return randImgNum;\n  };\n\n  return (\n    <div\n      className=\"Quilt\"\n      css={{\n        display: \"grid\",\n        gridTemplateColumns: \"repeat(18, 85px)\",\n        gridTemplateRows: \"repeat(7, 100px)\",\n        margin: \"20px 0\",\n      }}\n    >\n      {[...Array(18 * 7).keys()].map((num, idx) => {\n        const hexiImage = getImage(18, idx);\n        imageList.push(hexiImage);\n        return <Hexagon key={`hexi-key-${num}`} idx={idx} image={hexiImage} />;\n      })}\n    </div>\n  );\n};\n\nexport default QuiltSection;\n","export default function getRandomInt(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min)) + min; //The maximum is exclusive and the minimum is inclusive\n}\n","const images = [...Array(6).keys()]\n  .map((wkey, widx) => {\n    const w = `${-(widx * 114 + 55)}px`;\n\n    const h = [...Array(4).keys()].map((hkey, hidx) => {\n      return `${w} ${-hidx * 114 - 1}px`;\n    });\n\n    return h.join();\n  })\n  .join()\n  .split(\",\");\n\nexport default images;\n","import React from \"react\";\nimport \"./App.css\";\nimport QuiltSection from \"./components/QuiltSection\";\nimport images from \"./components/image\";\n\nfunction App() {\n  console.log(images);\n  return (\n    <main>\n      <div css={{ display: \"flex\", justifyContent: \"space-around\" }}>\n        {[...Array(25).keys()].map((image, idx) => {\n          console.log(idx + 1);\n          return (\n            <div\n              key={`orig-image-order-${idx}`}\n              css={{\n                width: 50,\n                height: 50,\n                backgroundRepeat: \"no-repeat\",\n                backgroundImage: `url(/beeCreative${idx + 1}.jpg)`,\n                backgroundPosition: \"center\",\n                margin: \"20px 0\",\n                boxShadow: \"2px 2px 4px #888888\",\n                color: \"blue\",\n                fontSize: 48,\n              }}\n            >\n              {idx + 1}\n            </div>\n          );\n        })}\n      </div>\n      <QuiltSection />\n    </main>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}