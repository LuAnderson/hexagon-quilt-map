{"version":3,"sources":["components/Hexagon.js","components/QuiltSection.js","components/util.js","components/FabricKey.js","App.js","serviceWorker.js","index.js"],"names":["Hexagon","image","idx","fabric","debug","quiltSectionWidth","isEven","Math","floor","css","overflow","position","clipPath","width","height","margin","backgroundRepeat","backgroundImage","backgroundPosition","marginTop","QuiltSection","setCounts","hueWidth","quiltSectionHeight","imageList","shape","prevImage","prevPrevImage","prevHue","notColors","className","display","gridTemplateColumns","gridTemplateRows","paddingTop","paddingBottom","paddingRight","Array","keys","map","num","hexiImage","rowWidth","min","max","lastRow","lastRowValue","randImgNum","randImageHue","sameAsLastRow","sameAsLastRowHue","ceil","random","indexOf","push","getImage","key","FabricKey","counts","padding","backgroundColor","borderRadius","boxShadow","fontWeight","fontSize","notImg","count","color","Subtitle","title","description","FormItem","label","children","App","useState","setQuiltSectionWidth","setQuiltSectionHeight","setFabric","setDebug","href","value","onChange","event","target","imgNum","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6d72061f.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Hexagon = ({ image, idx, fabric, debug, quiltSectionWidth }) => {\n  // if even number wide, true.\n  // if not even number wide, make even every other row.\n  const isEven = quiltSectionWidth % 2 === 0 || Math.floor(idx / quiltSectionWidth) % 2 === 0;\n  return (\n    <div\n      css={[\n        {\n          overflow: \"hidden\",\n          position: \"relative\",\n          clipPath: \"polygon(25% 0%, 75% 0%, 100% 50%, 75% 100%, 25% 100%, 0% 50%)\",\n          width: `calc(125vw / ${quiltSectionWidth})`,\n          height: `calc((40 * (125vw / ${quiltSectionWidth})) / 45)`,\n          margin: 0,\n          backgroundRepeat: \"repeat\",\n          backgroundImage: `url(./images/${fabric}/${fabric}${image}.jpg)`,\n          backgroundPosition: \"center\",\n        },\n        isEven\n          ? {\n              \"&:nth-of-type(even)\": {\n                marginTop: `calc((40 * 125vw / ${quiltSectionWidth}) / 45 / 2)`,\n              },\n            }\n          : {\n              \"&:nth-of-type(odd)\": {\n                marginTop: `calc((40 * 125vw / ${quiltSectionWidth}) / 45 / 2)`,\n              },\n            },\n      ]}\n    >\n      {debug === true && (\n        <div\n          css={{\n            width: \"100%\",\n            height: \"100%\",\n            display: \"flex\",\n            justifyContent: \"center\",\n            alignItems: \"center\",\n          }}\n        >\n          <div\n            css={{\n              width: \"100%\",\n              zIndex: 10,\n              color: \"blue\",\n              fontSize: 24,\n              fontWeight: \"bold\",\n              textAlign: \"center\",\n              backgroundColor: \"rgba(255, 255, 255, 0.6)\",\n            }}\n          >{`${image}`}</div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nHexagon.propTypes = {\n  image: PropTypes.number,\n  idx: PropTypes.number,\n  fabric: PropTypes.string,\n  debug: PropTypes.bool,\n  quiltSectionWidth: PropTypes.number,\n};\n\nexport default Hexagon;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Hexagon from \"./Hexagon\";\nimport getRandomInt from \"./util\";\n\nconst QuiltSection = ({ setCounts, hueWidth, quiltSectionWidth, quiltSectionHeight, fabric, debug, shape }) => {\n  // array of objects\n  let imageList = [];\n  // single object\n  let prevImage = \"\";\n  let prevPrevImage = \"\";\n  let prevHue = \"\";\n\n  const notColors = [25];\n\n  // get random image\n  const getImage = (rowWidth, idx) => {\n    // get 3 hexis touching top of current hexi\n    const lastRow = [imageList[idx - rowWidth - 1], imageList[idx - rowWidth], imageList[idx - rowWidth + 1]];\n    const lastRowValue = [lastRow[0] % hueWidth, lastRow[1] % hueWidth, lastRow[2] % hueWidth];\n\n    // Set default random values\n    let randImgNum = 1;\n    let randImageHue = randImgNum % hueWidth;\n    let sameAsLastRow = true;\n    let sameAsLastRowHue = true;\n\n    do {\n      // Get random values\n      randImgNum = getRandomInt(1, 27);\n      randImageHue = randImgNum % hueWidth;\n\n      // set params for easier \"while\" use\n      sameAsLastRow = lastRow.indexOf(randImgNum) > -1;\n      sameAsLastRowHue = lastRowValue.indexOf(randImageHue) > -1;\n    } while (\n      notColors.indexOf(randImgNum) > -1 ||\n      randImgNum === prevImage ||\n      randImageHue === prevHue ||\n      randImgNum === prevPrevImage ||\n      // randImageHue === prevPrevHue || // This is, apparently, impossible without breaking a chrome tab\n      sameAsLastRow ||\n      sameAsLastRowHue\n    );\n\n    // increment all the values for the next loop\n    prevPrevImage = prevImage;\n    prevImage = randImgNum;\n    prevHue = randImageHue;\n    imageList.push(randImgNum);\n    setCounts(randImgNum);\n\n    return randImgNum;\n  };\n\n  return (\n    <div\n      className=\"Quilt\"\n      css={{\n        width: \"94vw\",\n        display: \"grid\",\n        gridTemplateColumns: `repeat(${quiltSectionWidth}, calc(94vw / ${quiltSectionWidth} ))`,\n        gridTemplateRows: `repeat(${quiltSectionHeight}, calc(40 * (125vw / ${quiltSectionWidth}) / 45))`,\n        margin: \"20px auto\",\n        paddingTop: 20,\n        paddingBottom: 20,\n        paddingRight: 30,\n      }}\n    >\n      {[...Array(quiltSectionWidth * quiltSectionHeight).keys()].map((num, idx) => {\n        const hexiImage = getImage(quiltSectionWidth, idx);\n        return (\n          <Hexagon\n            key={`hexi-key-${num}`}\n            quiltSectionWidth={quiltSectionWidth}\n            idx={idx}\n            image={hexiImage}\n            debug={debug}\n            fabric={fabric}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nQuiltSection.propTypes = {\n  setCounts: PropTypes.func,\n  hueWidth: PropTypes.number,\n  quiltSectionWidth: PropTypes.number,\n  quiltSectionHeight: PropTypes.number,\n  fabric: PropTypes.string,\n  debug: PropTypes.bool,\n};\n\nexport default QuiltSection;\n","export default function getRandomInt(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min)) + min; //The maximum is exclusive and the minimum is inclusive\n}\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst FabricKey = ({ counts, hueWidth, fabric }) => {\n  const width = hueWidth * 120;\n\n  return (\n    <aside\n      css={{\n        margin: \"auto\",\n        padding: \"1px 20px 20px 20px\",\n        width: width,\n        backgroundColor: \"#fff\",\n        borderRadius: \"5px\",\n        boxShadow: \"4px 4px 8px rgba(0, 0, 0, 0.3)\",\n      }}\n    >\n      <h2>Color Key</h2>\n\n      <div\n        css={{\n          display: \"grid\",\n          gridTemplateColumns: \"repeat(5, 120px)\",\n          width: width,\n          fontWeight: \"bold\",\n          fontSize: 24,\n        }}\n      >\n        {[...Array(5).keys()].map((image, idx) => {\n          return (\n            <div\n              key={`Hue-${(idx + 1) % hueWidth}`}\n              css={{ borderBottom: \"1px solid grey\", marginBottom: 10, paddingBottom: 10 }}\n            >{`Hue: ${(idx + 1) % hueWidth}`}</div>\n          );\n        })}\n      </div>\n\n      <div css={{ display: \"grid\", gridTemplateColumns: \"repeat(5, 1fr)\" }}>\n        {[...Array(26).keys()].map((image, idx) => {\n          const notImg = [25].indexOf(idx + 1) !== -1;\n\n          const count = counts[idx + 1] || 0;\n\n          return (\n            <div css={{ marginBottom: 6 }} key={`Image-${idx + 1}`}>\n              {!notImg && (\n                <div\n                  css={{\n                    fontWeight: \"bold\",\n                    fontSize: 16,\n                    textShadow: \"0px 0px 2px white\",\n                  }}\n                >\n                  <span>{`#${idx + 1}: `}</span>\n                  <span css={{ color: (count < 4 || count > 6) && \"red\" }}>{`${counts[idx + 1] || 0} Hexis`}</span>\n                </div>\n              )}\n              <div\n                key={`orig-image-order-${idx + 1}`}\n                css={{\n                  width: 120,\n                  height: 50,\n                  backgroundRepeat: \"no-repeat\",\n                  backgroundImage: `url(./images/${fabric}/${fabric}${idx + 1}.jpg)`,\n                  backgroundPosition: \"center\",\n                }}\n              />\n            </div>\n          );\n        })}\n      </div>\n    </aside>\n  );\n};\n\nFabricKey.propTypes = {\n  counts: PropTypes.object,\n  hueWidth: PropTypes.number,\n  fabric: PropTypes.string,\n};\n\nexport default FabricKey;\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport QuiltSection from \"./components/QuiltSection\";\nimport FabricKey from \"./components/FabricKey\";\n\nconst Subtitle = ({ title, description }) => (\n  <p\n    css={{\n      margin: 10,\n      padding: 0,\n      fontSize: \"1.2rem\",\n    }}\n  >\n    <span css={{ fontWeight: \"bold\" }}>{title}</span> {description}\n  </p>\n);\n\nconst FormItem = ({ label, children }) => {\n  return (\n    <label\n      css={{ display: \"flex\", justifyContent: \"flex-start\", alignItems: \"center\", marginTop: 10, marginBottom: 10 }}\n    >\n      <p css={{ margin: 0, padding: 0, width: 200, textAlign: \"right\" }}>{label}</p>\n      {children}\n    </label>\n  );\n};\n\nfunction App() {\n  // Find out number of instances\n  let counts = {};\n  const hueWidth = 5;\n  const [quiltSectionWidth, setQuiltSectionWidth] = useState(18);\n  const [quiltSectionHeight, setQuiltSectionHeight] = useState(7);\n  const [fabric, setFabric] = useState(\"beeCreative\");\n\n  const setCounts = imgNum => {\n    counts[imgNum] = (counts[imgNum] || 0) + 1;\n  };\n\n  const [debug, setDebug] = useState(false);\n\n  return (\n    <main className=\"App\">\n      <header\n        css={{\n          margin: \"20px auto\",\n          display: \"flex\",\n          justifyContent: \"space-around\",\n          alignItems: \"center\",\n          width: \"94vw\",\n          flexWrap: \"wrap\",\n        }}\n      >\n        <div>\n          <h1>Hexagon Quilt Randomizer</h1>\n          <div>\n            <Subtitle\n              title=\"Website:\"\n              description={\n                <a href=\"https://knitcodemonkey.github.io/hexagon-quilt-map/\">\n                  https://knitcodemonkey.github.io/hexagon-quilt-map/\n                </a>\n              }\n            />\n            <Subtitle\n              title=\"Github:\"\n              description={\n                <a href=\"https://github.com/knitcodemonkey/hexagon-quilt-map\">\n                  https://github.com/knitcodemonkey/hexagon-quilt-map\n                </a>\n              }\n            />\n          </div>\n        </div>\n\n        <form css={{ minWidth: 500 }}>\n          <FormItem label=\"Hexagons Wide:\">\n            <select value={quiltSectionWidth} onChange={event => setQuiltSectionWidth(event.target.value)}>\n              {[...Array(30).keys()].map(num => {\n                return (\n                  <option key={`wide-${num + 1}`} value={num + 1}>\n                    {num + 1}\n                  </option>\n                );\n              })}\n            </select>\n          </FormItem>\n\n          <FormItem label=\"Hexagons Tall:\">\n            <select value={quiltSectionHeight} onChange={event => setQuiltSectionHeight(event.target.value)}>\n              {[...Array(30).keys()].map(num => {\n                return (\n                  <option key={`tall-${num + 1}`} value={num + 1}>\n                    {num + 1}\n                  </option>\n                );\n              })}\n            </select>\n          </FormItem>\n\n          <FormItem label=\"Fabric:\">\n            <select value={fabric} onChange={event => setFabric(event.target.value)}>\n              <option value={\"beeCreative\"}>\"Bee Creative\" by Deb Strain</option>\n            </select>\n          </FormItem>\n\n          <FormItem label=\"Show Image Number:\">\n            <select value={debug} onChange={() => setDebug(!debug)}>\n              <option value={true}>Yes</option>\n              <option value={false}>No</option>\n            </select>\n          </FormItem>\n        </form>\n      </header>\n\n      <article\n        css={{\n          borderTop: \"1px solid rgba(0, 0, 0, 0.3)\",\n          borderBottom: \"1px solid rgba(0, 0, 0, 0.3)\",\n          paddingBottom: \"56px\",\n          margin: \"0 auto\",\n        }}\n      >\n        <QuiltSection\n          setCounts={setCounts}\n          hueWidth={hueWidth}\n          quiltSectionWidth={quiltSectionWidth}\n          quiltSectionHeight={quiltSectionHeight}\n          debug={debug}\n          fabric={fabric}\n        />\n      </article>\n\n      <footer\n        css={{\n          marginTop: 40,\n          marginBottom: 40,\n        }}\n      >\n        <FabricKey counts={counts} hueWidth={hueWidth} fabric={fabric} />\n      </footer>\n    </main>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}