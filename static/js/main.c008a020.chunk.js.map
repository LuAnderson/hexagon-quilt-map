{"version":3,"sources":["components/Hexagon.js","components/QuiltSection.js","components/util.js","components/FabricKey.js","App.js","serviceWorker.js","index.js"],"names":["Hexagon","image","idx","css","overflow","visibility","transform","width","height","margin","marginTop","backgroundRepeat","backgroundImage","backgroundPosition","backgroundOrigin","backgroundColor","QuiltSection","setCounts","hueWidth","quiltSectionWidth","quiltSectionHeight","imageList","prevImage","prevPrevImage","prevHue","notColors","className","display","gridTemplateColumns","gridTemplateRows","paddingRight","Array","keys","map","num","hexiImage","rowWidth","min","max","lastRow","lastRowValue","randImgNum","randImageHue","sameAsLastRow","sameAsLastRowHue","Math","ceil","floor","random","indexOf","push","getImage","key","FabricKey","counts","textAlign","fontWeight","fontSize","notImg","count","color","Subtitle","title","description","App","justifyContent","alignItems","imgNum","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c008a020.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Hexagon = ({ image, idx }) => {\n  return (\n    <div\n      css={{\n        overflow: \"hidden\",\n        visibility: \"hidden\",\n        transform: \"rotate(120deg)\",\n        width: 225,\n        height: 100,\n        margin: `0 0 0 -55px`,\n        \":nth-child(even)\": {\n          marginTop: 50,\n        },\n      }}\n    >\n      <div\n        css={{\n          position: \"relative\",\n          overflow: \"hidden\",\n          width: \"100%\",\n          height: \"100%\",\n          transform: \"rotate(-60deg)\",\n        }}\n      >\n        <div\n          css={{\n            width: \"100%\",\n            height: \"100%\",\n            backgroundRepeat: \"repeat\",\n            backgroundImage: `url(./images/beeCreative${image}.jpg)`,\n            backgroundPosition: \"center\",\n            visibility: \"visible\",\n            transform: \"rotate(-60deg)\",\n            backgroundOrigin: \"border-box\",\n            backgroundColor: idx % 2 ? \"red\" : \"blue\",\n          }}\n        >\n          <div\n            css={{\n              position: \"absolute\",\n              display: \"flex\",\n              top: \"25%\",\n              left: \"40%\",\n              bottom: \"25%\",\n              rigt: \"40%\",\n              zIndex: 10,\n              color: \"blue\",\n              fontSize: 24,\n              fontWeight: 900,\n              textShadow: \"0px 0px 2px white\",\n              textAlign: 'center'\n            }}\n          >\n            {`${image}-${image % 5}`}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nHexagon.propTypes = {\n  image: PropTypes.number,\n  idx: PropTypes.number,\n};\n\nexport default Hexagon;\n","import React from \"react\";\nimport Hexagon from \"./Hexagon\";\nimport getRandomInt from \"./util\";\n\nconst QuiltSection = ({ setCounts, hueWidth, quiltSectionWidth, quiltSectionHeight }) => {\n  // array of objects\n  let imageList = [];\n  // single object\n  let prevImage = \"\";\n  let prevPrevImage = \"\";\n  let prevHue = \"\";\n\n  const notColors = [25];\n\n  // get random image\n  const getImage = (rowWidth, idx) => {\n\n    // get 3 hexis touching top of current hexi\n    const lastRow = [imageList[idx - rowWidth - 1], imageList[idx - rowWidth], imageList[idx - rowWidth + 1]];\n    const lastRowValue = [lastRow[0] % hueWidth, lastRow[1] % hueWidth, lastRow[2] % hueWidth];\n\n    // Set default random values\n    let randImgNum = 1;\n    let randImageHue = randImgNum % hueWidth;\n    let sameAsLastRow = true;\n    let sameAsLastRowHue = true;\n\n    do {\n      // Get random values\n      randImgNum = getRandomInt(1, 27);\n      randImageHue = randImgNum % hueWidth;\n\n      // set params for easier \"while\" use\n      sameAsLastRow = lastRow.indexOf(randImgNum) > -1;\n      sameAsLastRowHue = lastRowValue.indexOf(randImageHue) > -1;\n\n    } while (\n      notColors.indexOf(randImgNum) > -1 ||\n      randImgNum === prevImage ||\n      randImageHue === prevHue ||\n      randImgNum === prevPrevImage ||\n      // randImageHue === prevPrevHue || // This is, apparently, impossible without breaking a chrome tab\n      sameAsLastRow ||\n      sameAsLastRowHue\n    );\n\n    // increment all the values for the next loop\n    prevPrevImage = prevImage;\n    prevImage = randImgNum;\n    prevHue = randImageHue;\n    imageList.push(randImgNum);\n    setCounts(randImgNum);\n\n    return randImgNum;\n  };\n\n  return (\n    <div\n      className=\"Quilt\"\n      css={{\n        width: quiltSectionWidth * 85,\n        display: \"grid\",\n        gridTemplateColumns: `repeat(${quiltSectionWidth}, 85px)`,\n        gridTemplateRows: `repeat(${quiltSectionHeight}, 100px)`,\n        margin: \"20px auto\",\n        paddingRight: 30\n      }}\n    >\n      {[...Array(quiltSectionWidth * quiltSectionHeight).keys()].map((num, idx) => {\n        const hexiImage = getImage(quiltSectionWidth, idx);\n        return <Hexagon key={`hexi-key-${num}`} idx={idx} image={hexiImage} />;\n      })}\n    </div>\n  );\n};\n\nexport default QuiltSection;\n","export default function getRandomInt(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min)) + min; //The maximum is exclusive and the minimum is inclusive\n}\n","import React from \"react\";\n\nconst FabricKey = ({ counts, hueWidth }) => {\nconst width = hueWidth * 120\n\n  return (\n    <aside css={{ margin: 'auto', width: width}}>\n      <h2 css={{textAlign: 'center'}}>Color Key</h2>\n\n      <div css={{ display: \"grid\", gridTemplateColumns: \"repeat(5, 120px)\", width: width, textAlign: \"center\", fontWeight: 'bold', fontSize: 24 }}>\n        {[...Array(5).keys()].map((image, idx) => {\n          return (\n            <div \n              key={`Hue-${(idx + 1) % hueWidth}`} \n              css={{borderBottom: '1px solid grey', marginBottom: 10, paddingBottom: 10}}\n            >{`Hue: ${(idx + 1) % hueWidth}`}</div>\n          )\n\n        })}\n      </div>\n\n      <div css={{ display: \"grid\", gridTemplateColumns: \"repeat(5, 1fr)\" }}>\n        {[...Array(26).keys()].map((image, idx) => {\n          const notImg = [25].indexOf(idx + 1) !== -1;\n\n          const count = counts[idx + 1] || 0;\n\n          return (\n            <div\n              css={{ marginBottom: 6 }}\n              key={`Image-${idx + 1}`}\n            >\n              {!notImg && (\n                <div\n                  css={{\n                    fontWeight: \"bold\",\n                    fontSize: 16,\n                    textShadow: \"0px 0px 2px white\",\n                    textAlign: 'center'\n                  }}\n                >\n                  <span>{`#${idx + 1}: `}</span>\n                  <span css={{color: (count < 4 || count > 6) && 'red' }}>{`${counts[idx + 1] || 0} Hexis`}</span>\n                </div>\n              )}\n              <div\n                key={`orig-image-order-${idx + 1}`}\n                css={{\n                  width: 120,\n                  height: 50,\n                  backgroundRepeat: \"no-repeat\",\n                  backgroundImage: `url(./images/beeCreative${idx + 1}.jpg)`,\n                  backgroundPosition: \"center\",\n                }}\n              />\n            </div>\n          );\n        })}\n      </div>\n    </aside>\n  );\n};\n\nexport default FabricKey;\n","import React from \"react\";\nimport \"./App.css\";\nimport QuiltSection from \"./components/QuiltSection\";\nimport FabricKey from \"./components/FabricKey\";\n\n\nconst Subtitle = ({title, description}) => (\n  <p css={{\n    margin: 10,\n    padding: 0\n  }}><span css={{ fontWeight: 'bold'}}>{title}</span> {description}</p>\n)\n\nfunction App() {\n  // Find out number of instances\n  let counts = {};\n  const hueWidth = 5;\n  const quiltSectionWidth = 18\n  const quiltSectionHeight = 7\n\n  const setCounts = imgNum => {\n    counts[imgNum] = (counts[imgNum] || 0) + 1;\n  };\n\n  return (\n    <main>\n      <header css={{textAlign: 'center', margin: '20px auto 50px auto', display: 'flex', justifyContent: 'space-around', alignItems: 'center', width: quiltSectionWidth * 85}}>\n        <div css={{textAlign: 'center'}}>\n          <h1>Hexagon Quilt Randomizer</h1>\n          <div>\n            <Subtitle title=\"Sample Fabric:\" description='\"Bee Creative\" by Modus Fabrics' />\n            <Subtitle title=\"Hexagons Wide:\" description={quiltSectionWidth} />\n            <Subtitle title=\"Hexagons Tall:\" description={quiltSectionHeight} />\n            \n          </div>\n        </div>\n        \n      </header>\n      <article>\n      \n        <QuiltSection setCounts={setCounts} hueWidth={hueWidth} quiltSectionWidth={quiltSectionWidth} quiltSectionHeight={quiltSectionHeight} />\n      </article>\n\n      <footer>\n        <FabricKey counts={counts} hueWidth={hueWidth} />\n      </footer>\n      \n    </main>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}